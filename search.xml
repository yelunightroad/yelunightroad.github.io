<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo设置持续集成过程中遇到的一些问题]]></title>
    <url>%2F2017%2F11%2F26%2Fhexo%E8%AE%BE%E7%BD%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[由于hexo d的方式来布置hexo博客不能满足多台计算机编辑以及备份的需求，所以参考Hexo的版本控制与持续集成的博客，进行了持续集成的配置，效果显著， 终于可以随时随地的编辑博客了。 但是这个过程中也遇到一个问题，就是当我们使用第三方主题的时候（我使用的是next）主题文件夹不能上传到source repository，原因也很简单，因为我是直接使用git clone https://github.com/iissnan/hexo-theme-next themes/next克隆的next主题，所以next文件夹下有.git，是一个独立的repo，当然无法上传，删掉.git后就一切正常了，但这也带来另一个问题，就是我们想更新主题的时候比较麻烦，因为已经是一个独立的本地文件夹了，后来经过搜索，确定了使用git subtree来解决这个问题。 关于git subtree的内容大家可以自行网上搜索，简单来说就是git用来管理子项目的一种方式，整个操作过程如下 12345678910# 添加next仓库，命名为nextgit remote add next https://github.com/iissnan/hexo-theme-next#添加next的master分支到子树git subtree add --prefix=themes/next next master --squash#看看有哪些稳定版本git ls-remote --tags next#测试切换到5.1.2版本git subtree pull --prefix=themes/next next tags/v5.1.2 --squash#测试切换到5.1.3版本git subtree pull --prefix=themes/next next tags/v5.1.3 --squash 在切换到5.1.2版本后，我修改了主题配置文件，添加了livere_uid(來必力评论配置，在next主题下配置这一行就可以开启，简单易配置，不翻墙就可以评论，推荐大家使用)，然后尝试切换到5.1.3版本，发现很智能保留了这个配置（两个版本的配置文件是不同的，merge的过程很顺利），所以通过这个方案切换新版本应该是可行的。 这里需要注意的即使代码的第4行，我一开始写的是git subtree add --prefix=themes/next next tags/v5.1.2 --squash，在这样的情况下5.1.2版本的下载倒是没有问题，但是更新到5.1.3时，会提示已经是最新的代码无法更新，相信大多数人还是以稳定版为主，如果不是想折腾一下源码的话，所以推荐按照现在的顺序来配置。]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>CI</tag>
        <tag>git subtree</tag>
        <tag>來必力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[yii1.1版本下访问数据库时需要注意的问题]]></title>
    <url>%2F2017%2F11%2F26%2Fyii1-1%E7%89%88%E6%9C%AC%E4%B8%8B%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%B6%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[上篇文章提到我们使用了greenplum来代替mysql来适应数据规模较大的情况，同时尽量保证小的改动。服务端我们使用的是yii1.1版本，之所以不是2.0原因很简单，历史选择。但在使用greenplum的过程中我们发现某些查询下速度特别慢，后经过各种测试发现，一旦调用了prepare方法，在数据量较大时速度就会特别慢，怀疑时greenplum优化的问题，但由于使用的是dba自己改造后的版本，也就没有深究其官方版本是不是也存在这样的bug。 那么现在的问题就变成了我们使用的是CDbcommand模块queryAll方法，并没有调用其prepare方法，那么为什么还会慢的，阅读其源码发现，所有的query方法，最终都是靠queryInternal方法实现的，在该函数的32行我们不难发现，默认情况先总会调用prepare函数，所以即使我们没有显示的调用CDbcommand的prepare方法，最终还是难以避免这一点。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465private function queryInternal($method,$mode,$params=array()) &#123; $params=array_merge($this-&gt;params,$params); if($this-&gt;_connection-&gt;enableParamLogging &amp;&amp; ($pars=array_merge($this-&gt;_paramLog,$params))!==array()) &#123; $p=array(); foreach($pars as $name=&gt;$value) $p[$name]=$name.'='.var_export($value,true); $par='. Bound with '.implode(', ',$p); &#125; else $par=''; Yii::trace('Querying SQL: '.$this-&gt;getText().$par,'system.db.CDbCommand'); if($this-&gt;_connection-&gt;queryCachingCount&gt;0 &amp;&amp; $method!=='' &amp;&amp; $this-&gt;_connection-&gt;queryCachingDuration&gt;0 &amp;&amp; $this-&gt;_connection-&gt;queryCacheID!==false &amp;&amp; ($cache=Yii::app()-&gt;getComponent($this-&gt;_connection-&gt;queryCacheID))!==null) &#123; $this-&gt;_connection-&gt;queryCachingCount--; $cacheKey='yii:dbquery'.':'.$method.':'.$this-&gt;_connection-&gt;connectionString.':'.$this-&gt;_connection-&gt;username; $cacheKey.=':'.$this-&gt;getText().':'.serialize(array_merge($this-&gt;_paramLog,$params)); if(($result=$cache-&gt;get($cacheKey))!==false) &#123; Yii::trace('Query result found in cache','system.db.CDbCommand'); return $result[0]; &#125; &#125; try &#123; if($this-&gt;_connection-&gt;enableProfiling) Yii::beginProfile('system.db.CDbCommand.query('.$this-&gt;getText().$par.')','system.db.CDbCommand.query'); $this-&gt;prepare(); if($params===array()) $this-&gt;_statement-&gt;execute(); else $this-&gt;_statement-&gt;execute($params); if($method==='') $result=new CDbDataReader($this); else &#123; $mode=(array)$mode; call_user_func_array(array($this-&gt;_statement, 'setFetchMode'), $mode); $result=$this-&gt;_statement-&gt;$method(); $this-&gt;_statement-&gt;closeCursor(); &#125; if($this-&gt;_connection-&gt;enableProfiling) Yii::endProfile('system.db.CDbCommand.query('.$this-&gt;getText().$par.')','system.db.CDbCommand.query'); if(isset($cache,$cacheKey)) $cache-&gt;set($cacheKey, array($result), $this-&gt;_connection-&gt;queryCachingDuration, $this-&gt;_connection-&gt;queryCachingDependency); return $result; &#125; catch(Exception $e) &#123; if($this-&gt;_connection-&gt;enableProfiling) Yii::endProfile('system.db.CDbCommand.query('.$this-&gt;getText().$par.')','system.db.CDbCommand.query'); $errorInfo=$e instanceof PDOException ? $e-&gt;errorInfo : null; $message=$e-&gt;getMessage(); Yii::log(Yii::t('yii','CDbCommand::&#123;method&#125;() failed: &#123;error&#125;. The SQL statement executed was: &#123;sql&#125;.', array('&#123;method&#125;'=&gt;$method, '&#123;error&#125;'=&gt;$message, '&#123;sql&#125;'=&gt;$this-&gt;getText().$par)),CLogger::LEVEL_ERROR,'system.db.CDbCommand'); if(YII_DEBUG) $message.='. The SQL statement executed was: '.$this-&gt;getText().$par; throw new CDbException(Yii::t('yii','CDbCommand failed to execute the SQL statement: &#123;error&#125;', array('&#123;error&#125;'=&gt;$message)),(int)$e-&gt;getCode(),$errorInfo); &#125; &#125; 最终的解决方案是在配置中加了’emulatePrepare’ =&gt; true的配置，该配置项其实就是启用了pdo中的模拟预处理，用模拟预处理代替greenplum龟速的预处理，最终解决了该问题。]]></content>
      <categories>
        <category>web开发</category>
        <category>数据库访问</category>
      </categories>
      <tags>
        <tag>greenplum</tag>
        <tag>yii</tag>
        <tag>emulate prepare</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql与postgresql的区别]]></title>
    <url>%2F2017%2F11%2F14%2Fmysql%E4%B8%8Epostgresql%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[在工作中由于数据量太大时mysql负载的压力，我们引入了greenplum做我们大数据量表格的数据库，选择greenplum的原因是它在解决大数据存储的同时，尽可能的保持了和mysql一样的操作逻辑（同是关系型数据库，使用sql查询），减小了我们的迁移成本，但是尽管如此，greenplum基于的postgresql引擎和mysql还是存在一定的差异，此文对目前遇到的问题进行了记录，以防止以后再次出现同样的问题。 反引号的区别 在mysql中，对于保留字使用反引号来加以区分，例如想查询一个表中的select字段，由于select是保留字我们需写成 SELECT `select` FROM table 而在postgresql中不存在这种写法，当identifier为保留字时，则使用双引号 SELECT &quot;select&quot; FROM table limit的差别 在mysql中limit可以间简写为limit 10,100，其等价于limit 100 offset 10而在postgresql中只能采用第二种标准的sql方式 对if语句的支持 mysql支持if 语句，例如if(x&gt;1,1,0)而postgresql只支持case when语句 大小写 mysql中是不区分大小写的，你查询一个字段，写大小写都可以，而在postgresql中是区分大小写的，如果想要字段名大些，必须用双引号将其扩起，由于一些历史原因mysql中使用了大写的字段名，查询也没有问题，但是到postgresql中就失败了，所以建议在sql中，采用下划线分割，不要使用驼峰命名发 以上就是目前遇到的mysql迁移greenplum过程中遇到的一些问题，可以看到大部分是因为mysql在标准sql的基础上给我们提供了更加方便的解决方式，但这种方式在迁移数据库时会给我们带来意想不到的麻烦，所以除非肯定只用一种数据库，否则还是建议按照标准sql书写]]></content>
      <categories>
        <category>sql相关</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>postgresql</tag>
        <tag>greenplum</tag>
      </tags>
  </entry>
</search>
